openapi: '3.0.3'
info:
  title: Six cities API
  version: '1.0'
servers:
  - url: http://localhost:5000
tags:
  - name: User
    description: Действия с пользователями
  - name: Offers
    description: Действия с предложениями
  - name: Comments
    description: Действия с комментариями
  - name: Cities
    description: Действия с городами
  - name: Favorites
    description: Действия с избранными предложениями
paths:
  /users/register:
    post:
      security: []
      tags:
        - User
      summary: Создание пользователя
      requestBody:
        description: Данные пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        201:
          description: Успешное создание пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        409:
          description: Пользователь с таким email уже существует.

  /users/login:
    post:
      security: []
      tags:
        - User
      summary: Авторизация пользователя
      requestBody:
        description: Данные для авторизации
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signin'
        required: true
      responses:
        200:
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLogin'
        400:
          description: Неверный логин или пароль.

  /users/logout:
    delete:
      tags:
        - User
      summary: Завершение авторизации
      responses:
        204:
          description: Успешное завершение авторизации
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /users/profile:
    get:
      tags:
        - User
      summary: Получение данных о пользователе
      responses:
        200:
          description: Успешное получение данных пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        404:
          description: Пользователь не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    patch:
      tags:
        - User
      summary: Редактирование аватара профиля
      requestBody:
        description: Данные для обновления профиля пользователя
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: base64
            encoding:
              avatar:
                contentType: image/jpg, image/jpeg, image/png
      responses:
        200:
          description: Успешное редактирование аватара пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        400:
          description: Неверный формат файла
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'

  /offers:
    get:
      security: []
      tags:
        - Offers
      summary: Получение списка предложений
      description: Не более 60 предложений
      parameters:
        - $ref: '#/components/parameters/CityName'
      responses:
        200:
          description: Успешное получение списка предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
                maxLength: 60
        400:
          description: Неизвестный город
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    post:
      tags:
        - Offers
      summary: Создание нового предложения
      requestBody:
        description: 'Данные для создания нового предложения'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOffer'
        required: true
      responses:
        200:
          description: Предложение создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        401:
          description: Пользователь не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /offers/{offerId}:
    get:
      security: []
      tags:
        - Offers
      summary: Получение предложения по id
      parameters:
        - $ref: '#/components/parameters/OfferId'
      responses:
        200:
          description: Список предложений
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

    patch:
      tags:
        - Offers
      summary: Редактирование предложения
      parameters:
        - $ref: '#/components/parameters/OfferId'
      requestBody:
        description: Измененные данные
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOffer'
      responses:
        200:
          description: Успешное редактирование
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
    delete:
      tags:
        - Offers
      summary: Удаление предложения
      parameters:
        - $ref: '#/components/parameters/OfferId'
      responses:
        200:
          description: Успешное удаление предложения
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /offers/premium:
    get:
      security: []
      tags:
        - Offers
      summary: Получение списка премиальных предложений
      description: Максимальное количество премиум предложений 3
      parameters:
        - $ref: '#/components/parameters/CityName'
      responses:
        200:
          description: Успешное получение списка премиальных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
                maxLength: 3
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /cities:
    get:
      security: []
      tags:
        - Cities
      summary: Получение списка городов
      responses:
        200:
          description: Успешное получение списка городов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'

  /comments/{offerId}:
    get:
      security: []
      tags:
        - Comments
      summary: Получение списка комментриев
      parameters:
        - $ref: '#/components/parameters/OfferId'
      responses:
        200:
          description: Успешное получение списка комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

    post:
      tags:
        - Comments
      summary: Добавление комментария
      parameters:
        - $ref: '#/components/parameters/OfferId'
      requestBody:
        description: Данные для добавления комментария
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
        required: true
      responses:
        200:
          description: Успешное добавление комментария
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'

  /favorites:
    get:
      tags:
        - Favorites
      summary: Получение списка избранных предложений
      responses:
        200:
          description: Успешное получение списка избранных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Offer'
        default:
          description: Неизвестная ошибка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DefaultError'
  /favorites/{offerId}:
    post:
      tags:
        - Favorites
      summary: Добавление предложения в избранное
      parameters:
        - $ref: '#/components/parameters/OfferId'
      responses:
        200:
          description: Успешное добавление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

    delete:
      tags:
        - Favorites
      summary: Удаление предложения из избранного
      parameters:
        - $ref: '#/components/parameters/OfferId'
      responses:
        200:
          description: Успешное добавление
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'

components:
  parameters:
    CityName:
      name: cityName
      in: query
      description: Название города
      schema:
        type: string
      required: true
      example: Paris

    OfferId:
      name: offerId
      in: path
      description: Идентификатор предложения
      schema:
        type: string
      required: true

  schemas:
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        name:
          type: string
          example: John
        email:
          type: string
          example: john@post.me
        avatar:
          type: string
          example: http://se.mm/govtoho.jpg
        type:
          type: string
          enum:
            - regular
            - pro

    UserId:
      type: string
      example: 64e05bcc0517b8d356cd36f1

    SuccessLogin:
      type: object
      allOf:
        - $ref: '#/components/schemas/User'
        - $ref: '#/components/schemas/UserToken'

    UserToken:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJpZCI6IjY1MmY4MWZhNDFlOGVmZGNmMmMwNzQ5ZSIsImlhdCI6MTY5ODQ4MDAyMiwiZXhwIjoxNjk5MDg0ODIyfQ.KMmO1-fnBFrpU8yfjCl--d0Dfn0qITBmFcwC9WeKVeg

    Signup:
      type: object
      properties:
        email:
          type: string
          example: john@post.me
        name:
          type: string
          example: John
        password:
          type: string
          example: 1234qwer
        type:
          type: string
          enum:
            - regular
            - pro

    Signin:
      type: object
      properties:
        email:
          type: string
          example: john@post.me
        password:
          type: string
          example: 1234qwer

    Offer:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewOffer'
      properties:
        id:
          type: string
          example: 64e05bcc0517b8d356cd36f1
        isFavorite:
          type: boolean
          example: false
        commentsCount:
          type: number
          example: 12
        raiting:
          type: number
          example: 4
        owner:
          type: object
          $ref: '#/components/schemas/User'
        city:
          type: object
          $ref: '#/components/schemas/City'

    NewOffer:
      type: object
      properties:
        title:
          type: string
          example: 1-к. квартира, 35,2 м²
        description:
          type: string
          example: Санузел в керамогранитной плитке, там же установлена стиральная машинка.
        date:
          type: string
          example: 2023-12-04T07:22:40+03:00
        city:
          type: object
          properties:
            name:
              type: string
              $ref: '#/components/schemas/CityName'
        preview:
          type: string
          example: 'http://pawof.bb/fa.jpg'
        pictures:
          type: array
          items:
            type: string
            minLength: 6
            maxLength: 6
          example:
            [
              'http://pawof.bb/fa.jpg',
              'http://pawof.bb/fa.jpg',
              'http://pawof.bb/fa.jpg',
              'http://pawof.bb/fa.jpg',
              'http://pawof.bb/fa.jpg',
              'http://pawof.bb/fa.jpg',
            ]
        isPremium:
          type: boolean
          example: true
        houseType:
          type: string
          $ref: '#/components/schemas/HouseType'
        rooms:
          type: number
          minimum: 1
          maximum: 8
          example: 3
        guests:
          type: number
          minimum: 1
          maximum: 10
          example: 4
        price:
          type: number
          minimum: 100
          maximum: 10000
          example: 1209
        equipment:
          type: array
          $ref: '#/components/schemas/Equipment'
        coordinates:
          type: object
          $ref: '#/components/schemas/Coordinates'

    HouseType:
      type: string
      enum:
        - apartment
        - house
        - room
        - hotel
      example: house

    Coordinates:
      type: object
      properties:
        latitude:
          type: number
          example: 50.846557
        longitude:
          type: number
          example: 4.351697

    Equipment:
      type: array
      items:
        type: string
        enum:
          - Breakfast
          - Air conditioning
          - Laptop friendly workspace
          - Baby seat
          - Washer
          - Towels
          - Fridge
        minLength: 1
        example: Fridge

    CityName:
      type: string
      enum:
        - Paris
        - Cologne
        - Brussels
        - Amsterdam
        - Hamburg
        - Dusseldorf
      example: Paris

    City:
      type: object
      properties:
        name:
          type: string
          $ref: '#/components/schemas/CityName'
        coordinates:
          type: object
          $ref: '#/components/schemas/Coordinates'

    Comment:
      type: object
      properties:
        id:
          type: string
          example: 64e05bcc0517b8d356cd36f1
        comment:
          type: string
          example: Текст комментария
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        owner:
          type: object
          $ref: '#/components/schemas/User'
        date:
          type: string
          example: 2023-08-10T06:06:04.950Z

    NewComment:
      type: object
      properties:
        comment:
          type: string
          example: Текст комментария
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4

    DefaultError:
      type: object
      properties:
        code:
          type: number
          example: 500
        message:
          type: string
          example: Неизвестная ошибка
    NotFoundError:
      type: object
      properties:
        code:
          type: number
          example: 404
        message:
          type: string
          example: Не найдено
    AuthError:
      type: object
      properties:
        code:
          type: number
          example: 401
        message:
          type: string
          example: Пользователь не авторизован
    BadRequestError:
      type: object
      properties:
        code:
          type: number
          example: 400
        message:
          type: string
          example: Неверный запрос

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
